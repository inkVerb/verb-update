#!/bin/sh
#inkVerbSerf! verb.ink

# This downloads and installs the current verified version of OWA to a custom domain

# How to use:
## ./installowa [domain.tld] [webfolder (optional, use -n if no folder but using custom dbase info)] [dbase] [dbuser] [dbpassword]
## ./installowa [domain.tld]  # This will use default usernames and passwords



CVAPPNAME=owa

# Include the config
. /opt/verb/conf/siteurilist

DOMAIN=$1
FOLDER=$2
DBASE=$3
DBUSER=$4
DBPASSWORD=$5
CLEANNAME=$(/bin/echo $DOMAIN | sed -e 's/\.//g')

# Basic credential check
if [ -z "${1}" ]; then
/bin/echo "You must designate a domain. Read the How to use. Can't continue."
exit 8; fi

# Web folder?
if [ -z "${2}" ] || [ "${FOLDER}" = "-n" ]; then
  noFolder="true"
  VAPPDOMAIN="${DOMAIN}"
  LOCTDOMAIN="${DOMAIN}"
else
  noFolder="false"
  VAPPDOMAIN="${DOMAIN}-${FOLDER}"
  LOCTDOMAIN="${DOMAIN}/${FOLDER}"
fi
# Check if already installed
## Config
if [ -z "${3}" ] && [ -f /opt/verb/conf/vapp.${CVAPPNAME}.${VAPPDOMAIN} ]; then
/bin/echo "This is already installed."
exit 0; fi
## Directory
if [ -d /srv/www/vapps/${CVAPPNAME}.${VAPPDOMAIN} ]; then
/bin/echo "OWA already exists in the system. If it isn't working, look deeper on the server. For now, doing nothing."
exit 8; fi

# Include the config file
. /opt/verb/conf/siteurilist
if [ "${DOMAIN}" = "owa.${redURI}" ]; then
  isRed="true"
  /bin/ln -snf /srv/www/verb/red.owa /srv/www/html/"${DOMAIN}"
else
  isRed="false"
fi

# Download and unpack the latest checked version from inkisaverb.com/repo
cd /srv/www/vapps
/opt/verb/serfs/inkget ${CVAPPNAME} check; wait
if [ "$?" = 4 ]; then
/bin/echo "Repo failed to retrieve the file."
exit 4; fi

# Auto database
if [ -z ${5} ]; then
DBPASSWORD=$(/usr/bin/pwgen -s -1 10); fi
if [ -z ${3} ]; then
DBASE=${CLEANNAME}$(/usr/bin/pwgen -s -1 6); fi
if [ -z ${4} ]; then
DBUSER=${DBASE}; fi

/bin/mv /srv/www/${CVAPPNAME} /srv/www/vapps/${CVAPPNAME}.${VAPPDOMAIN}
/bin/ln -sfn /srv/www/vapps/${CVAPPNAME}.${VAPPDOMAIN} /srv/www/html/${LOCTDOMAIN}
/bin/ln -sfn /srv/www/vapps/${CVAPPNAME}.${VAPPDOMAIN} /srv/vip/_webapps/; wait
/bin/chown -R www:www /srv/www/html/${LOCTDOMAIN}; wait
/bin/chown -R www:www /srv/www/vapps/${CVAPPNAME}.${VAPPDOMAIN}; wait

# Create the database user and credentials
/usr/bin/mysql --defaults-extra-file=/opt/verb/conf/mysqlboss.cnf -e "
CREATE DATABASE  ${DBASE};
GRANT ALL PRIVILEGES ON *.* TO '${DBUSER}'@'localhost' IDENTIFIED BY '${DBPASSWORD}' WITH GRANT OPTION;
FLUSH PRIVILEGES;"

# Write the config for backup
/bin/echo "#!/bin/sh
APPDBASE=${DBASE}
APPDDBUSR=${DBUSER}
APPDDBPAS=${DBPASSWORD}" > /opt/verb/conf/vapp.${CVAPPNAME}.${VAPPDOMAIN}

# Put the settings in the OWA config file
cd /srv/www/html/${LOCTDOMAIN}
/bin/cp owa-config-dist.php owa-config.php
/bin/sed -i "s/yourdbtypegoeshere/mysql/g" owa-config.php
/bin/sed -i "s/yourdbnamegoeshere/${DBASE}/g" owa-config.php
/bin/sed -i "s/yourdbhostgoeshere/localhost/g" owa-config.php
/bin/sed -i "s/yourdbusergoeshere/${DBUSER}/g" owa-config.php
/bin/sed -i "s/yourdbpasswordgoeshere/${DBPASSWORD}/g" owa-config.php
/bin/sed -i "s/define('OWA_PUBLIC_URL',.*/define('OWA_PUBLIC_URL', 'https:\/\/${LOCTDOMAIN}\/');/g" owa-config.php

# Add the secure salt and key strings
OWA_NONCE_KEY="$(/usr/bin/pwgen -s -1 27)"
OWA_NONCE_SALT="$(/usr/bin/pwgen -s -1 27)"
OWA_AUTH_KEY="$(/usr/bin/pwgen -s -1 27)"
OWA_AUTH_SALT="$(/usr/bin/pwgen -s -1 27)"
/bin/sed -i "s/define('OWA_NONCE_KEY',.*/define('OWA_NONCE_KEY', '${OWA_NONCE_KEY}');/g" owa-config.php
/bin/sed -i "s/define('OWA_NONCE_SALT',.*/define('OWA_NONCE_SALT', '${OWA_NONCE_SALT}');/g" owa-config.php
/bin/sed -i "s/define('OWA_AUTH_KEY',.*/define('OWA_AUTH_KEY', '${OWA_AUTH_KEY}');/g" owa-config.php
/bin/sed -i "s/define('OWA_AUTH_SALT',.*/define('OWA_AUTH_SALT', '${OWA_AUTH_SALT}');/g" owa-config.php

# Cleanup
if [ "${isRed}" = "true" ]; then
  /bin/rm -f /srv/www/html/"${DOMAIN}"
fi

# Reset all permissions
/bin/chown -R www:www /srv/www/vapps/${CVAPPNAME}; wait

# Restart webserver
. /opt/verb/conf/servertype
if [ ${SERVERTYPE} = "lemp" ]; then
  /usr/bin/systemctl restart nginx
elif [ ${SERVERTYPE} = "lamp" ]; then
  /usr/bin/systemctl restart httpd
elif [ ${SERVERTYPE} = "laemp" ]; then
  /usr/bin/systemctl restart httpd
  /usr/bin/systemctl restart nginx
fi

# Finish
/bin/echo "These are setup:

Database: ${DBASE}
Database user: ${DBUSER}
Database password: ${DBPASSWORD}

Go to the https://${LOCTDOMAIN}/install.php site to install.
"
