#!/bin/bash
#inkVerbSerf! verb.ink

# This resets a complete list of local inkDNS domains in the Bind config file: /var/named/named.conf.verb after copying inkDNS db. files to /var/named/zones/db.*

# How to use:
## ./inkdnsrefreshbind

usagenotes="This installs the inkDNS Bind package for managing DNS records on the server"
usageformat="inkdnsrefreshbind"
usageexample="inkdnsrefreshbind"
hierarchy=( secondary )
vsetnames=(  )
vsettypes=(  )
voptnames=(  )
vopttypes=(  )
voptflags=(  )
voptflagpurpose=(  )
dependencyinstall=( inkdnsinstall )
prerequesite=(  )
usedby=( inkdnsadddomain inkdnsaddinkdkim inkdnsaddmail inkdnsaddonesub inkdnsaddslave inkdnsaddsub inkdnsaddvipsub inkdnsinstall inkdnssetrink inkdnssetrink2 killinkdnsdomain killinkdnsinkdkim killinkdnsmail killinkdnsonesub killinkdnsslavedns killinkdnssub killinkdnsvipsub setip4update setip6update )
useserfs=(  )
useconfigs=( sitenameip siteurilist inkdnsconf )
if [ -n "$infoINKonly" ] && [ "$infoINKonly" = "true" ]; then return 0; fi # Must have for proper usage to not run the full serf
if [ -e "/opt/verb/mods/inkdnsrefreshbind.replace" ]; then . /opt/verb/mods/inkdnsrefreshbind.replace; return 0; fi # Precedes this script
if [ -e "/opt/verb/mods/inkdnsrefreshbind.before" ]; then . /opt/verb/mods/inkdnsrefreshbind.before; return 0; fi # Replaces this script


# Include the configs
. /opt/verb/conf/sitenameip
. /opt/verb/conf/siteurilist
. /opt/verb/conf/inkdnsconf

if [ "${INKDNSSTAT}" = "INSTALLED" ]; then

  # Stop Bind
  /bin/systemctl stop named

  # Create the directories and configs
  /usr/bin/rm -rf /var/named/zones
  /usr/bin/cp -rf /opt/verb/conf/inkdns/zones /var/named/
  /usr/bin/cp -f /opt/verb/conf/inkdns/inkzones/db.* /var/named/zones/
  /usr/bin/cp -f /opt/verb/conf/inkdns/inkzones/nv.* /var/named/zones/
  /bin/chown -R root:named /var/named/zones
  /bin/chmod -R 755 /var/named/zones

  # inkDNS domain list file
  /usr/bin/rm -f /var/named/named.conf.verb
  /bin/echo '// inkVerb-inkDNS domain list file, managed automatically, edits will likely be deleted' > /var/named/named.conf.verb
  /bin/chown root:named /var/named/named.conf.verb
  /bin/chmod 644 /var/named/named.conf.verb
  # Refresh global inkDNS rDNS config & zone files
  ## rDNS config
  /usr/bin/rm -f /var/named/named.conf.rdns
  /bin/echo "// Created by inkDNS, managed automatically, edits will likely be deleted
zone \"${SITEARPAIP6}\" { type master; allow-transfer { ${SITERINKIP6}; ${SITERINKIP4}; ${SITE2RINKIP6}; ${SITE2RINKIP4}; }; file \"nv.verber\"; allow-query { any; }; };
zone \"${SITEARPAIP4}\" { type master; allow-transfer { ${SITERINKIP6}; ${SITERINKIP4}; ${SITE2RINKIP6}; ${SITE2RINKIP4}; }; file \"nv.verber\"; allow-query { any; }; };
" > /var/named/named.conf.rdns
  ### Permissions
  /bin/chown root:named /var/named/named.conf.rdns
  /bin/chmod 644 /var/named/named.conf.rdns
  ## rDNS zone file
  /usr/bin/rm -f /var/named/nv.verber
  /usr/bin/cat <<EOF > /var/named/nv.verber
\$TTL    86400
@		IN  SOA		${hostURI}. dns.inkisaverb.com. (
0000000001		; Serial No
10800			; Refresh
3600			; Retry
604800			; Expire
1800 )			; Minimum TTL

; Nameserver Defaults
@		IN  NS		${SITERINKDNS}.
@		IN  NS		${SITE2RINKDNS}.

; Hosted Domains
EOF
  /bin/chown root:named /var/named/nv.verber
  /bin/chmod 644 /var/named/nv.verber
  ## rDNS zone file entries
  cd /var/named/zones/
  for inkZoneDB in db.*; do
    inkZone="$(/bin/echo ${inkZoneDB} | sed 's/db\.//' )"
    if [ "${inkZone}" = '*' ]; then continue; fi
      # We don't use 'allow-update { none; };' because 'update-policy' will ignore 'allow-update'
      /bin/echo "zone \"${inkZone}\" { type master; allow-transfer { ${SITERINKIP6}; ${SITERINKIP4}; ${SITE2RINKIP6}; ${SITE2RINKIP4}; }; file \"zones/db.${inkZone}\"; update-policy { grant inkCertbotKey name _acme-challenge.${inkZone}. txt; }; };" >> /var/named/named.conf.verb
      /bin/echo "\$INCLUDE \"/var/named/zones/nv.${inkZone}\";" >> /var/named/nv.verber
  done
# Dev, this is all handled elsewhere
#   ## Slave DNS server?
#   if [ -f "/opt/verb/conf/inkdns/sdns/dnshost" ]; then
#     . /opt/verb/conf/inkdns/sdns/dnshost
#     ### Create the zone files
#     SDNSDATESTAMP="$(date '+%Y%m%d')"
#     SDNSSERNO="${SDNSDATESTAMP}00"
#     #### DNS
#     /usr/bin/rm -f /var/named/db.slavedns
#     /usr/bin/cat <<EOF > /var/named/db.slavedns
# \$TTL    86400
# @		IN  SOA		${DNSSLAVE}. dns.inkisaverb.com. (
# ${SDNSSERNO}		; Serial No
# 10800			; Refresh
# 3600			; Retry
# 604800			; Expire
# 1800 )			; Minimum TTL
#
# ; Nameserver Defaults
# @		IN  NS		${SITERINKDNS}.
# @		IN  NS		${SITE2RINKDNS}.
#
# ; Hosted Domains
# EOF
#     /bin/chown root:named /var/named/db.slavedns
#     /bin/chmod 644 /var/named/db.slavedns
#     #### rDNS
#     /usr/bin/rm -f /var/named/nv.slavedns
#     /usr/bin/cat <<EOF > /var/named/nv.slavedns
# ; PTR Domain
# ${SITEARPAIP4}		IN  PTR  ${DNSSLAVE}.
# ${SITEARPAIP6}		IN  PTR  ${DNSSLAVE}.
# EOF
#     /bin/chown root:named /var/named/nv.slavedns
#     /bin/chmod 644 /var/named/nv.slavedns
#     ### If this is set as the tertiary DNS server
#     if [ "${DNSSLAVE}" = "${SITE2RINKDNS}" ]; then
#       /bin/echo "zone \"${DNSSLAVE}\" { type master; allow-update { none; }; allow-transfer { ${SITERINKIP6}; ${SITERINKIP4}; }; file \"db.slavedns\"; };" >> /var/named/named.conf.verb
#     ### If this is set as the secondary DNS server
#     elif [ "${DNSSLAVE}" = "${SITERINKDNS}" ]; then
#       /bin/echo "zone \"${DNSSLAVE}\" { type master; allow-update { none; }; allow-transfer { ${SITE2RINKIP6}; ${SITE2RINKIP4}; }; file \"db.slavedns\"; };" >> /var/named/named.conf.verb
#     ### If this is not set as the secondary or tertiary DNS server
#     else
#       /bin/echo "zone \"${DNSSLAVE}\" { type master; allow-update { none; }; allow-transfer { ${SITERINKIP6}; ${SITERINKIP4}; ${SITE2RINKIP6}; ${SITE2RINKIP4}; }; file \"db.slavedns\"; };" >> /var/named/named.conf.verb
#     fi
#     /bin/echo "\$INCLUDE \"/var/named/nv.slavedns\";" >> /var/named/nv.verber
#     ### Served slave records
#     if [ -e "/opt/verb/conf/inkdns/sdns/s.*" ]; then
#       for slv in /opt/verb/conf/inkdns/sdns/s.*; do
#         . ${slv}
#         /bin/echo "zone \"${SDOM}\" { type slave; masters { ${SIP6CMP}; ${SIP4}; }; allow-transfer { none; }; file \"db.${SDOM}\"; };" >> /var/named/named.conf.verb
#         /bin/echo "zone \"${SIP4ARPA}\" { type slave; masters { ${SIP6CMP}; ${SIP4}; }; allow-transfer { none; }; file \"nv4.${SDOM}\"; };" >> /var/named/nv.verber
#         /bin/echo "zone \"${SIP6ARPA}\" { type slave; masters { ${SIP6CMP}; ${SIP4}; }; allow-transfer { none; }; file \"nv6.${SDOM}\"; };" >> /var/named/nv.verber
#       done
#     fi
#   fi # End Slave DNS
  ## Set the new serial (code imported from inkdnsserial)
  ### Create the datestamp
  DATESTAMP="$(date '+%Y%m%d')"
  ### Set the increment for today
  /usr/bin/touch /opt/verb/conf/inkdns/serial
  OLDSERIAL="$(/bin/cat /opt/verb/conf/inkdns/serial)"
  #### Keep it to two digits
  if [ "${OLDSERIAL}" -gt "98" ]; then
  OLDSERIAL="0"; fi
  #### Keep the digits double
  NEWSERIAL=$(expr ${OLDSERIAL} + 1)
  if [ "${NEWSERIAL}" -le "9" ]; then
  NEWSERIAL="0${NEWSERIAL}"; fi
  #### Record the serial
  /bin/echo "${NEWSERIAL}" > /opt/verb/conf/inkdns/serial
  ### Create a datestamp-based serial number to the second (how inkVerb does it)
  SERNO="${DATESTAMP}${NEWSERIAL}\t\t; Serial No"
  ### Set it in the file
  /usr/bin/sed -i "/; Serial No/c ${SERNO}" /var/named/nv.verber

  # Restart Bind
  /bin/systemctl start named || /bin/systemctl restart named

else /bin/echo "inkDNS not installed, run inkdnsinstall first."; exit 0
fi




if [ -e "/opt/verb/mods/inkdnsrefreshbind.after" ]; then . /opt/verb/mods/inkdnsrefreshbind.after; fi # Follows this script
