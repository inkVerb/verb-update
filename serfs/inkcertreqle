#!/bin/bash
#inkVerbSerf! verb.ink

# This requests and gets Letsencrypt certs via inkCert-Letsencrypt for a given domain, including inkVerb namespace domains
## It also applies to all subdomains for that domain
## Prerequesite: inkcertinstall, domains added via adddomain or an existing and active verb domain on the server
## This is intended as a subscript of inkcertdole
## Use the "r" option at the end to bypass the normal check for already-done LE certs and refresh the cert, such as to include recently added subdomains.

# How to use:
## ./inkcertreqle [ domain.tld NO SUBDOMAINS ] [ r (optional) ]

#Eg:
## ./inkcertreqle inkisaverb.com
## ./inkcertreqle YOURNAME.verb.blue
## ./inkcertreqle inkisaverb.com r
## ./inkcertreqle YOURNAME.verb.pink r

usagenotes="This requests and gets Letsencrypt certs via inkCert-Letsencrypt for a given domain, including inkVerb namespace domains"
usageformat="inkcertreqle [ domain.tld NO SUBDOMAINS ] [ r (optional) ]"
usageexample="inkcertreqle inkisaverb.com
inkcertreqle YOURNAME.verb.blue
inkcertreqle inkisaverb.com r
inkcertreqle YOURNAME.verb.pink r"
hierarchy=( tertiary inkcertdole )
vsetnames=( "Domain" )
vsettypes=( isDomain )
voptnames=(  )
vopttypes=(  )
voptflags=( r )
voptflagpurpose=( "Refresh if already done (required for domains with certs already installed)" )
dependencyinstall=( inkcertinstall )
prerequesite=( inkcertinstall adddomain )
usedby=( inkcertdole )
useserfs=(  )
useconfigs=( sitenameip siteurilist servertype inkcertstatus )	# List config files of any kind used in this serf, please preserve order of appearance
if [ -n "infoINKonly" ] && [ "infoINKonly" = "true" ]; then return 0; fi # Must have for proper usage to not run the full serf
if [ -e "/opt/verb/mods/inkcertreqle.replace" ]; then . /opt/verb/mods/inkcertreqle.replace; return 0; fi # Precedes this script
if [ -e "/opt/verb/mods/inkcertreqle.before" ]; then . /opt/verb/mods/inkcertreqle.before; return 0; fi # Replaces this script


DOMAIN=$1

# Include the configs
. /opt/verb/conf/sitenameip
. /opt/verb/conf/siteurilist
. /opt/verb/conf/servertype
. /opt/verb/conf/inkcertstatus

# Check inkCert installed
if [ "${INKCERTINSTALLED}" = "NOT_YET" ]; then
/bin/echo "inkCert not yet installed.

First run inkcertinstall
"
exit 0
fi

# Verify that the domain is installed
if [ ! -f /opt/verb/conf/inkcert/cli-ini/siteinkcert.${DOMAIN} ]; then
/bin/echo "Sorry, Bucko. ${DOMAIN} is not installed yet.

Do that first, then get back to me.
"; exit 0
fi

# Include and check the inkCert domain config
. /opt/verb/conf/inkcert/cli-ini/siteinkcert.${DOMAIN}
inkcertmsg="This sets up certs for inkCert's via Letsencrypt."
case ${INKCERTED} in
  DONE_SC)
  /bin/echo $inkcertmsg
  /bin/echo "inkCert self-cert is already setup for ${DOMAIN}.

  To set up certs differently, first run: inkcertrevokesc ${DOMAIN}, then run this again.
  "
  exit 0
  ;;
  DONE_LE)
  /bin/echo $inkcertmsg
  /bin/echo "inkCert Letsencrypt is already setup for ${DOMAIN}.

  To set up certs differently, first run: inkcertrevokele ${DOMAIN}, then run this again.
  "
  exit 0
  ;;
  DONE_CBSINGLE)
  /bin/echo $inkcertmsg
  /bin/echo "inkCert cert-bot single is already setup for ${DOMAIN}.

  To set up certs differently, first run: inkcertrevokecbsingle ${DOMAIN}, then run this again.
  "
  exit 0
  ;;
  DONE_CB)
  /bin/echo $inkcertmsg
  /bin/echo "inkCert cert-bot is already setup for ${DOMAIN}.

  To set up certs differently, first run: inkcertrevokecb ${DOMAIN}, then run this again.
  "
  exit 0
  ;;
  NO|NOT_YET)
    /bin/echo "Ready to go..."
  ;;
  *)
    if ! /bin/grep -q "INKCERTED=NO" /opt/verb/conf/inkcert/cli-ini/siteinkcert.${DOMAIN}; then
      /bin/echo "Something's wrong with the inkCert siteinkcert configs! Aborting"
      exit 6
    else
      /bin/echo "Ready to go..."
    fi
  ;;
esac

# Check for verb domain and status
## If verb domain was spelled correctly
if [[ "${DOMAIN}" =~ ".verb.email" ]] || [[ "${DOMAIN}" =~ ".verb.one" ]] || [[ "${DOMAIN}" =~ ".verb.ink" ]] || [[ "${DOMAIN}" =~ ".verb.blue" ]] || [[ "${DOMAIN}" =~ ".verb.vip" ]] || [[ "${DOMAIN}" =~ ".verb.kiwi" ]] || [[ "${DOMAIN}" =~ ".verb.red" ]] || [[ "${DOMAIN}" =~ ".verb.rocks" ]]; then
 if [[ "${DOMAIN}" != *"${SITENAME}"* ]]; then
/bin/echo "
Problem: You might have spelled ${DOMAIN} wrong.
  - Did you mean to include "${SITENAME}"?
  - Are you an awesome person with multiple inkVerb namespaces, but you somehow have the wrong server?
"
exit 0
 fi
fi
## Check specific verb domain tlds
### Create the error message function
verbtld_is_off() {
/bin/echo "
Problem: ${DOMAIN} is not active on this server...
  1. It could be running on a different Verber server. If so, run inkCert on that server.
  2. You could have planned it for this Verber server, but it's not on. Activate on this server with verbon
  3. It's possible you haven't purchased an inkVerb namespace from inkisaverb.com. It's not that expensive.
"; exit 0;
}
### Do the checks per each verb tld
. /opt/verb/conf/sitetldstatus
if [ "${DOMAIN}" = "${emailURI}" ]; then
 if [[ "${VERBemail}" != true ]]; then
  verbtld_is_off
 fi
fi
if [ "${DOMAIN}" = "${oneURI}" ]; then
 if [[ "${VERBone}" != true ]]; then
  verbtld_is_off
 fi
fi
if [ "${DOMAIN}" = "${inkURI}" ]; then
 if [[ "${VERBink}" != true ]]; then
  verbtld_is_off
 fi
fi
if [ "${DOMAIN}" = "${blueURI}" ]; then
 if [[ "${VERBblue}" != true ]]; then
  verbtld_is_off
 fi
fi
if [ "${DOMAIN}" = "${vipURI}" ]; then
 if [[ "${VERBvip}" != true ]]; then
  verbtld_is_off
 fi
fi
if [ "${DOMAIN}" = "${kiwiURI}" ]; then
 if [[ "${VERBkiwi}" != true ]]; then
  verbtld_is_off
 fi
fi
if [ "${DOMAIN}" = "${redURI}" ]; then
 if [[ "${VERBred}" != true ]]; then
  verbtld_is_off
 fi
fi

# Get the certs
##NOTE make the system wait before and after Letsencrypt because sometimes LE can stumble over it's own feet.
sleep 1
## We may need `yes n |` as alternatives to --server https://acme-v02.api.letsencrypt.org/directory --agree-tos
if [ ${SERVERTYPE} = "lemp" ] || [ ${SERVERTYPE} = "laemp" ]; then
  #yes n | /usr/bin/certbot --nginx certonly --expand --renew-by-default -c /opt/verb/conf/inkcert/cli-ini/cli.${DOMAIN}.ini
  /usr/bin/certbot --nginx certonly --expand --server https://acme-v02.api.letsencrypt.org/directory --agree-tos --no-eff-email --renew-by-default -c /opt/verb/conf/inkcert/cli-ini/cli.${DOMAIN}.ini
  if [ "$?" != "0" ]; then
    /bin/echo "Certs not installed, cannot proceed."
    export certsuccess="false"
    exit 4
  else
    export certsuccess="true"
  fi
  /bin/systemctl restart nginx; wait
elif [ ${SERVERTYPE} = "lamp" ]; then
  /usr/bin/certbot --apache certonly --expand --server https://acme-v02.api.letsencrypt.org/directory --agree-tos --no-eff-email --renew-by-default -c /opt/verb/conf/inkcert/cli-ini/cli.${DOMAIN}.ini
  if [ "$?" != "0" ]; then
    /bin/echo "Certs not installed, cannot proceed."
    export certsuccess="false"
    exit 4
  else
    export certsuccess="true"
  fi
  /bin/systemctl restart httpd; wait
fi
wait
sleep 1

# Verify the certs
if [ ! -d /etc/inkcert/le/live/${DOMAIN} ]; then
/bin/echo "Big error! Unable to get the certs from the cert authority. Can't continue."; exit 4
fi

# Finish
/bin/echo "
Finished getting certs. Now to install them with inkcertaddle...
"




if [ -e "/opt/verb/mods/inkcertreqle.after" ]; then . /opt/verb/mods/inkcertreqle.after; fi # Follows this script
